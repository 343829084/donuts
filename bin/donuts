#!/usr/bin/env node
'use strict';

const program = require('commander');
const childProcess = require('child_process');
const https = require('https');

const err = (err) => err && console.log(err.message);
const log = log => console.log(log);
const noop = function() {};

const pkg = require('../package.json');
const type = require('os').type();
const isDarwin = type === 'Darwin';
const isWindows = type === 'Windows_NT';


// download helper
const download = (dir, callback) => {
  let fs = require('fs');
  let path = require('path');
  let ProgressBar = require('progress');
  let bar = new ProgressBar(':bar', { total: 80 });
  let file = fs.createWriteStream(dir + '/master.zip');
  let req = https.request({
    hostname: 'codeload.github.com',
    port: 443,
    path: '/sofish/donuts/zip/master'
  });

  req.on('response', res => {
    let len = parseInt(res.headers['content-length'], 10);
    let bar = new ProgressBar('Downloading [:bar] :percent', {
      complete: '=',
      incomplete: ' ',
      width: 20,
      total: len
    });

    res.pipe(file);
    file.on('finish', function() {
      file.close(callback);
    });

    res.on('data', chunk => bar.tick(chunk.length));
  });
  req.end();
};

// install dependencies
const install = folder =>{
  let cmd = `tar -xvf master.zip &&
    rm -rf master.zip ${folder}/www &&
    mv donuts-master/src/* ${folder} &&
    rm -rf donuts-master &&
    cd ${folder} &&
    bower install`;

  childProcess.exec(cmd, function(err) {
    if(err) return console.log(err.message);
    console.log('\nDependencies installed.');
  }).stdout.on('data', log);
};

// create
program
  .version(require('../package.json').version)
  .usage('[options] <command>')
  .command('create <folder> [identifier] [name]', 'create project')
  .action((folder, identifier, name) => {
    identifier = identifier || 'com.helloworld';
    name = 'helloworld';

    // create a cordova project
    childProcess.exec(`cordova create ${folder} ${identifier} ${name}`, (err) => {
      if(err) return console.log(err.message);

      // download `/www` file from remote repo
      download('./', (err) => {
        if(err) return console.log(err);
        install(folder);
      });
    }).stdout.on('data', () => {
      console.log('A donuts project was born. Installing dependencies...');
    });
  });

// dev
program
  .command('dev', 'setup dev env')
  .action(() => {
    let cmd = 'node_modules/gulp/bin/gulp.js';
    childProcess.exec(`${cmd} dev`, err).stdout.on('data', log);
  });

// run
program
  .command('run [platform]', 'run with emulator')
  .option('-D, --device', 'run with device')
  .action(platform => {
    platform = platform || (isDarwin ? 'ios' : 'android');

    // TODO: remove `--device` option?
    let device = program.device ? '--device' : '';
    childProcess.exec(`cordova run ${platform} ${device}`, err)
      .stdout.on('data', log);
  });

program.parse(process.argv);