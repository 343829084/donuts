#!/usr/bin/env node
'use strict';

const program = require('commander');
const childProcess = require('child_process');
const err = (err) => err && console.log(err.message);
const log = log => console.log(log);
const type = require('os').type();
const isDarwin = type === 'Darwin';
const isWindows = type === 'Windows_NT';
const pkg = require('../package.json');
const noop = function() {};

// download helper
let timer;
let ProgressBar = require('progress');
let bar = new ProgressBar(':bar', { total: 80 });
const download = (path, callback, mode) => {
  let url = pkg.homepage + '/archive/master.zip';
  let Download = require('download');

  mode = mode || '755';
  callback = callback || noop;

  timer = setInterval(function () {
    bar.tick();
  }, 300);

  new Download({ mode, extract: true })
    .get(url)
    .dest(path)
    .run(callback);
};

// install dependencies
const install = (folder) =>{
  let cmd = `rm -rf master.zip && mv donuts-master/src/www/* ${folder}/www && rm -rf donuts-master`;
  childProcess.exec(cmd, function(err) {
    if(err) return console.log(err.message);
    console.log('\nDependencies installed.');
    bar.complete = 1;
    clearInterval(timer);
  }).stdout.on('data', log);
};

// create
program
  .version(require('../package.json').version)
  .usage('[options] <command>')
  .command('create <folder> [identifier] [name]')
  .action((folder, identifier, name) => {
    identifier = identifier || 'com.helloworld';
    name = 'helloworld';

    // create a cordova project
    childProcess.exec(`cordova create ${folder} ${identifier} ${name}`, (err) => {
      if(err) return console.log(err.message);

      // download `/www` file from remote repo
      download('./', (err) => {
        if(err) return console.log(err);
        install(folder);
      });
    }).stdout.on('data', () => {
      console.log('A donuts project was born.');
      console.log('Installing dependencies...');
    });
  });

// dev
program
  .command('dev')
  .action(() => {
    let cmd = 'node_modules/gulp/bin/gulp.js';
    childProcess.exec(`${cmd} dev`, errHandler).stdout.on('data', log);
  });

// run
program
  .command('run [platform]')
  .action(platform => {
    platform = platform || (isDarwin ? 'ios' : 'android');

    // TODO: remove `--device` option?
    let ps = childProcess.exec(`cordova run ${platform} --device`, err)
      .stdout.on('data', log);
  });

program.parse(process.argv);